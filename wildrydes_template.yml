AWSTemplateFormatVersion: 2010-09-09
Description: The AWS resources for the backend of the WildRydes-Site.
Metadata:
  Version: 1.0.0

Parameters:
  AccessToken:
    Description: GitHub Personal Access Token for Amplify
    Type: String

  Repository:
    Description: WildRydes site GitHub Repository
    Type: String

Resources:
  ######### Module 1 - Amplify App - Static Website #########
  WildRydesAmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      AccessToken: !Ref AccessToken
      Description: WildRydes Amplify App
      Name: wildrydes-site
      Platform: WEB
      Repository: !Ref Repository

  WildRydesAmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      AppId: !GetAtt WildRydesAmplifyApp.AppId
      BranchName: main
      EnableAutoBuild: true
      Framework: Web
  ###############################################################

  ############ Module 2 - Cognito - User Management #############
  WildRydesUserPool:
    DependsOn: WildRydesAmplifyBranch
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: WildRydes
      AliasAttributes:
        - email
      AutoVerifiedAttributes:
        - email

  WildRydesUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: WildRydesWeb
      UserPoolId: !Ref WildRydesUserPool
      GenerateSecret: false
  ################################################################

  ############ Module 3 - DynamoDB - Database ####################
  WildrydesDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Rides
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: "RideId"
          KeyType: "HASH"
      AttributeDefinitions:
        - AttributeName: "RideId"
          AttributeType: "S"

  WildRydesLamdbaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: WildRydesLambda
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt WildrydesDynamoDB.Arn

  ########### Lambda Function #############################
  WildRydesLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Core function that will process API requests from the web application to dispatch a unicorn
      Handler: index.handler
      Runtime: nodejs16.x
      Role: !GetAtt WildRydesLamdbaRole.Arn
      Timeout: 120
      Code:
        ZipFile: |
          const randomBytes = require('crypto').randomBytes;

          const AWS = require('aws-sdk');

          const ddb = new AWS.DynamoDB.DocumentClient();

          const fleet = [
              {
                  Name: 'Bucephalus',
                  Color: 'Golden',
                  Gender: 'Male',
              },
              {
                  Name: 'Shadowfax',
                  Color: 'White',
                  Gender: 'Male',
              },
              {
                  Name: 'Rocinante',
                  Color: 'Yellow',
                  Gender: 'Female',
              },
          ];

          exports.handler = (event, context, callback) => {
              if (!event.requestContext.authorizer) {
                errorResponse('Authorization not configured', context.awsRequestId, callback);
                return;
              }

              const rideId = toUrlString(randomBytes(16));
              console.log('Received event (', rideId, '): ', event);

              // Because we're using a Cognito User Pools authorizer, all of the claims
              // included in the authentication token are provided in the request context.
              // This includes the username as well as other attributes.
              const username = event.requestContext.authorizer.claims['cognito:username'];

              // The body field of the event in a proxy integration is a raw string.
              // In order to extract meaningful values, we need to first parse this string
              // into an object. A more robust implementation might inspect the Content-Type
              // header first and use a different parsing strategy based on that value.
              const requestBody = JSON.parse(event.body);

              const pickupLocation = requestBody.PickupLocation;

              const unicorn = findUnicorn(pickupLocation);

              recordRide(rideId, username, unicorn).then(() => {
                  // You can use the callback function to provide a return value from your Node.js
                  // Lambda functions. The first parameter is used for failed invocations. The
                  // second parameter specifies the result data of the invocation.

                  // Because this Lambda function is called by an API Gateway proxy integration
                  // the result object must use the following structure.
                  callback(null, {
                      statusCode: 201,
                      body: JSON.stringify({
                          RideId: rideId,
                          Unicorn: unicorn,
                          Eta: '30 seconds',
                          Rider: username,
                      }),
                      headers: {
                          'Access-Control-Allow-Origin': '*',
                      },
                  });
              }).catch((err) => {
                  console.error(err);

                  // If there is an error during processing, catch it and return
                  // from the Lambda function successfully. Specify a 500 HTTP status
                  // code and provide an error message in the body. This will provide a
                  // more meaningful error response to the end client.
                  errorResponse(err.message, context.awsRequestId, callback)
              });
          };

          // This is where you would implement logic to find the optimal unicorn for
          // this ride (possibly invoking another Lambda function as a microservice.)
          // For simplicity, we'll just pick a unicorn at random.
          function findUnicorn(pickupLocation) {
              console.log('Finding unicorn for ', pickupLocation.Latitude, ', ', pickupLocation.Longitude);
              return fleet[Math.floor(Math.random() * fleet.length)];
          }

          function recordRide(rideId, username, unicorn) {
              return ddb.put({
                  TableName: 'Rides',
                  Item: {
                      RideId: rideId,
                      User: username,
                      Unicorn: unicorn,
                      RequestTime: new Date().toISOString(),
                  },
              }).promise();
          }

          function toUrlString(buffer) {
              return buffer.toString('base64')
                  .replace(/\+/g, '-')
                  .replace(/\//g, '_')
                  .replace(/=/g, '');
          }

          function errorResponse(errorMessage, awsRequestId, callback) {
            callback(null, {
              statusCode: 500,
              body: JSON.stringify({
                Error: errorMessage,
                Reference: awsRequestId,
              }),
              headers: {
                'Access-Control-Allow-Origin': '*',
              },
            });
          }
  ##############################################################

Outputs:
  userPoolId:
    Description: The User Pool ID
    Value: !Ref WildRydesUserPool
  userPoolClientId:
    Description: The User Pool Client ID
    Value: !Ref WildRydesUserPoolClient